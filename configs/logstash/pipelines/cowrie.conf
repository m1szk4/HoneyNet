# Logstash Pipeline for Cowrie (SSH/Telnet Honeypot)

input {
  file {
    path => "/input/cowrie/cowrie.json"
    codec => "json"
    type => "cowrie"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_cowrie"
  }
}

filter {
  # Parse timestamp
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
  }
  
  # Anonymize source IP
  ruby {
    code => '
      require "openssl"
      salt = ENV["SALT_SECRET"] || "default_salt_change_me"
      src_ip = event.get("src_ip")
      if src_ip
        hash = OpenSSL::HMAC.hexdigest("SHA256", salt, src_ip)
        event.set("source_ip_anon", hash)
        event.remove("src_ip")
      end
    '
  }
  
  # GeoIP enrichment (before anonymization in production, after for demo)
  geoip {
    source => "source_ip_anon"
    target => "geoip"
    fields => ["country_code2", "country_name"]
    tag_on_failure => ["_geoip_lookup_failure"]
  }
  
  # Extract country code
  if [geoip][country_code2] {
    mutate {
      add_field => { "country_code" => "%{[geoip][country_code2]}" }
    }
  }
  
  # Classify event type
  if [eventid] == "cowrie.login.success" {
    mutate {
      add_field => { 
        "attack_technique" => "T1078.001"  # Valid Accounts: Default Accounts
        "attack_tactic" => "Initial Access"
        "severity" => "medium"
        "is_bruteforce" => "1"
      }
    }
  } else if [eventid] == "cowrie.login.failed" {
    mutate {
      add_field => { 
        "attack_technique" => "T1110.001"  # Brute Force: Password Guessing
        "attack_tactic" => "Credential Access"
        "severity" => "low"
        "is_bruteforce" => "1"
      }
    }
  } else if [eventid] == "cowrie.command.input" {
    mutate {
      add_field => { 
        "attack_technique" => "T1059.004"  # Command and Scripting Interpreter: Unix Shell
        "attack_tactic" => "Execution"
        "severity" => "high"
      }
    }
  } else if [eventid] == "cowrie.session.file_download" {
    mutate {
      add_field => { 
        "attack_technique" => "T1105"  # Ingress Tool Transfer
        "attack_tactic" => "Command and Control"
        "severity" => "critical"
      }
    }
  }
  
  # Hash password for privacy
  if [password] {
    ruby {
      code => '
        require "openssl"
        password = event.get("password")
        hash = OpenSSL::Digest::SHA256.hexdigest(password)
        event.set("password_hash", hash)
        event.remove("password")
      '
    }
  }
  
  # Rename fields to match schema
  mutate {
    rename => {
      "eventid" => "event_type"
      "sensor" => "honeypot_name"
      "dst_ip" => "dest_ip"
      "dst_port" => "dest_port"
      "src_port" => "source_port"
      "session" => "session_id"
      "input" => "payload"
    }
    add_field => {
      "protocol" => "tcp"
    }
  }
  
  # Convert data types
  mutate {
    convert => {
      "source_port" => "integer"
      "dest_port" => "integer"
      "duration" => "integer"
    }
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => ["message", "path", "host", "log", "geoip"]
  }
}

output {
  # Send to ClickHouse
  http {
    url => "http://clickhouse:8123/?query=INSERT%20INTO%20honeynet.ssh_events%20FORMAT%20JSONEachRow"
    http_method => "post"
    format => "json_batch"
    content_type => "application/json"
    pool_max => 50
    pool_max_per_route => 25
  }
  
  # Debug output (optional, comment out in production)
  # stdout { codec => rubydebug }
}